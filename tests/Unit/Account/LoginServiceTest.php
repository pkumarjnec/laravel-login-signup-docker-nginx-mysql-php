<?php

namespace Tests\Unit\Oauth;

use App\Model\Account;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;
use \App\Services\Account\LoginService;

class LoginServiceTest extends TestCase
{

    use WithFaker;
    protected static $userInput;
    protected static $token;
    protected static $account;
    protected static $emailid;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpVar();
    }

    public function setUpVar()
    {
        if (empty(self::$userInput)) {
            $temp2 =  [
                'first_name' => $this->faker->firstName,
                'last_name'  => $this->faker->lastName,
                'name'       => $this->faker->firstName.' '.$this->faker->lastName,
                'emailid'    => $this->faker->email,
                'password'   => rand(100000,200000000),
                'mobile_no'  => $this->faker->phoneNumber,
                'document'   => 'https://dummy.com/dummy.pdf'
            ];
            self::$userInput = $temp2;
            $this->createAccount();
        }
    }

    /**
     * Create dummy account for login test
     *
     * @return void
     */
    public function createAccount()
    {
        $data = self::$userInput;
        $data['password'] = md5($data['password']);
        Account::create($data);
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testEmptyLogin()
    {
        $service = new \App\Services\Account\LoginService();
        $response = $service->login(array());
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testSuccessLogin()
    {
        $service    = new LoginService();
        $response   = $service->login(self::$userInput);
        $this->assertEquals('success', $response['status']);
        $this->assertEquals(Lang::get('account.successful_login'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }

    public function testFailLogin()
    {
        $data       = self::$userInput;
        $data['password'] = rand();
        $service    = new LoginService();
        $response   = $service->login($data);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.invalid_login'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }

    public function testFailEmptyEmailLogin()
    {
        $data       = self::$userInput;
        $data['emailid'] = '';
        $service    = new LoginService();
        $response   = $service->login($data);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testFailEmptyPasswordLogin()
    {
        $data       = self::$userInput;
        $data['password'] = '';
        $service    = new LoginService();
        $response   = $service->login($data);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testFailEmailLogin()
    {
        $data       = self::$userInput;
        $data['emailid'] = rand().'@gmail.com';
        $service    = new LoginService();
        $response   = $service->login($data);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.invalid_login'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }
}
