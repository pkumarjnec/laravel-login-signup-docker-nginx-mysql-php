<?php

namespace Tests\Unit\Oauth;

use App\Model\Account;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;

class ProfileServiceTest extends TestCase
{

    use WithFaker;
    protected static $userInput;
    protected static $token;
    protected static $accountId;
    protected static $emailid;
    protected static $file;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpVar();
    }

    public function setUpVar()
    {
        if (empty(self::$userInput)) {
            $temp2 =  [
                'first_name' => $this->faker->firstName,
                'last_name'  => $this->faker->lastName,
                'name'       => $this->faker->firstName.' '.$this->faker->lastName,
                'emailid'    => $this->faker->email,
                'password'   => rand(100000,200000000),
                'mobile_no'  => $this->faker->phoneNumber,
                'document'   => 'https://dummy.com/dummy.pdf'
            ];
            self::$userInput = $temp2;
            $this->createAccount();
            $this->dummyFile();
        }
    }

    private function dummyFile()
    {
        self::$file  = UploadedFile::fake()->create('image.jpg');
    }

    /**
     * Create dummy account for login test
     *
     * @return void
     */
    public function createAccount()
    {
        $data = self::$userInput;
        $data['password'] = md5($data['password']);
        $account = Account::create($data);
        self::$accountId = $account->id;
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testFetchProfile()
    {
        $data = self::$userInput;
        $service = new \App\Services\Account\ProfileService();
        $response = $service->profile(self::$accountId);
        $this->assertEquals('success', $response['status']);
        $this->assertEquals($data['name'], $response['account']->name);
        $this->assertEquals(200, $response['code']);
    }

    public function testEmptyProfile()
    {
        $service = new \App\Services\Account\ProfileService();
        $response = $service->profile(0);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testInvalidProfile()
    {
        $service = new \App\Services\Account\ProfileService();
        $response = $service->profile(222222222222);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.invalid_login'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }

    public function testEmptyUpdateProfile()
    {
        $service = new \App\Services\Account\ProfileService();
        $response = $service->update(array(),new \stdClass(),self::$accountId);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testEmptyAccountUpdateProfile()
    {
        $service = new \App\Services\Account\ProfileService();
        $response = $service->update(array(),new \stdClass(),0);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testInvalidAccountUpdateProfile()
    {
        $service = new \App\Services\Account\ProfileService();
        $response = $service->update(array(),new \stdClass(),2222222222);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testEmptyFileUpdateProfile()
    {

        $data = self::$userInput;
        $data['name'] = 'New Name';
        self::$userInput = $data;
        $service = new \App\Services\Account\ProfileService();
        $response = $service->update($data,new \stdClass(),self::$accountId);
        $this->assertEquals('success', $response['status']);
        $this->assertEquals(Lang::get('account.updated'), $response['message']);
        $this->assertEquals(200, $response['code']);

        $account = Account::search(array('id'=>self::$accountId));
        $this->assertEquals($data['name'], $account->name);
        $this->assertEquals("New", $account->first_name);
        $this->assertEquals("Name", $account->last_name);
    }

}
