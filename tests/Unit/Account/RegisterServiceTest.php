<?php

namespace Tests\Unit\Oauth;

use App\Model\AccountVerify;
use App\Services\Account\RegisterService;
use Aws\AwsClient;
use Basic\Rules\Aws;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;
use \App\Services\OAuth\LoginService;
use \App\Services\OAuth\SignupService;

class RegisterServiceTest extends TestCase
{

    use WithFaker;
    protected static $userInput;
    protected static $file;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpVar();
    }

    public function setUpVar()
    {
        if (empty(self::$userInput)) {
            $temp2 =  [
                'name'       => $this->faker->firstName.' '.$this->faker->lastName,
                'emailid'    => $this->faker->email,
                'mobile_no'  => $this->faker->phoneNumber,
                'document'   => 'https://dummy.com/dummy.pdf'
            ];
            self::$userInput = $temp2;
            $this->dummyFile();
        }
    }

    private function dummyFile()
    {
        self::$file  = UploadedFile::fake()->create('image.jpg');
    }

    public function testEmptySignup()
    {
        $service    = new RegisterService();
        $response   = $service->register(array(),new \stdClass());
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testEmptyInputSignup()
    {
        $service    = new RegisterService();
        $response   = $service->register(array(),self::$file);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testEmptyFileSignup()
    {
        $service    = new RegisterService();
        $response   = $service->register(self::$userInput,new \stdClass());
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.empty_request'), $response['message']);
        $this->assertEquals(422, $response['code']);
    }

    public function testSuccessSignup()
    {
        $service    = new RegisterService();
        $response   = $service->register(self::$userInput,self::$file);
        $this->assertEquals('success', $response['status']);
        $this->assertEquals(Lang::get('account.created'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }

    public function testDuplicateEmailSignup()
    {
        $service    = new RegisterService();
        $response   = $service->register(self::$userInput,self::$file);
        $this->assertEquals('error', $response['status']);
        $this->assertEquals(Lang::get('account.already_exist'), $response['message']);
        $this->assertEquals(200, $response['code']);
    }

}
